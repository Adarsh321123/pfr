import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.MeasureTheory.Constructions.Prod.Basic
import Mathlib.MeasureTheory.Measure.Portmanteau
--import Mathlib

/-!
# Products of finite measures and probability measures

-/

open MeasureTheory Topology Metric Filter Set ENNReal NNReal

open scoped Topology ENNReal NNReal BoundedContinuousFunction BigOperators

namespace MeasureTheory

@[simp] lemma FiniteMeasure.toMeasure_map {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] [MeasurableSpace Œ≤]
    (Œº : FiniteMeasure Œ±) (f : Œ± ‚Üí Œ≤) :
    (Œº.map f).toMeasure = Œº.toMeasure.map f := rfl

section FiniteMeasure_product

namespace FiniteMeasure

variable {Œ± : Type*} [MeasurableSpace Œ±]
-- [TopologicalSpace Œ±] [OpensMeasurableSpace Œ±]
variable {Œ≤ : Type*} [MeasurableSpace Œ≤]
-- [TopologicalSpace Œ≤] [OpensMeasurableSpace Œ≤]


/-- The binary product of finite measures. -/
noncomputable def prod (Œº : FiniteMeasure Œ±) (ŒΩ : FiniteMeasure Œ≤) : FiniteMeasure (Œ± √ó Œ≤) :=
  ‚ü®Œº.toMeasure.prod ŒΩ.toMeasure, Measure.prod.instIsFiniteMeasure Œº.toMeasure ŒΩ.toMeasure‚ü©

variable (Œº : FiniteMeasure Œ±) (ŒΩ : FiniteMeasure Œ≤)

@[simp] lemma toMeasure_prod : (Œº.prod ŒΩ).toMeasure = Œº.toMeasure.prod ŒΩ.toMeasure := rfl

lemma prod_apply (s : Set (Œ± √ó Œ≤)) (s_mble : MeasurableSet s) :
    Œº.prod ŒΩ s = ENNReal.toNNReal (‚à´‚Åª x, ŒΩ.toMeasure (Prod.mk x ‚Åª¬π' s) ‚àÇŒº) := by
  simp [@Measure.prod_apply Œ± Œ≤ _ _ Œº ŒΩ _ s s_mble]

lemma prod_apply_symm (s : Set (Œ± √ó Œ≤)) (s_mble : MeasurableSet s) :
    Œº.prod ŒΩ s = ENNReal.toNNReal (‚à´‚Åª y, Œº.toMeasure ((fun x ‚Ü¶ ‚ü®x, y‚ü©) ‚Åª¬π' s) ‚àÇŒΩ) := by
  simp [@Measure.prod_apply_symm Œ± Œ≤ _ _ Œº ŒΩ _ _ s s_mble]

lemma prod_prod (s : Set Œ±) (t : Set Œ≤) : Œº.prod ŒΩ (s √óÀ¢ t) = Œº s * ŒΩ t := by simp

lemma mass_prod : (Œº.prod ŒΩ).mass = Œº.mass * ŒΩ.mass := by
  simp only [mass, univ_prod_univ.symm, toMeasure_prod]
  rw [‚Üê ENNReal.toNNReal_mul]
  exact congr_arg ENNReal.toNNReal (Measure.prod_prod univ univ)

lemma zero_prod : (0 : FiniteMeasure Œ±).prod ŒΩ = 0 := by
  rw [‚Üê mass_zero_iff, mass_prod, zero_mass, zero_mul]

lemma prod_zero : Œº.prod (0 : FiniteMeasure Œ≤) = 0 := by
  rw [‚Üê mass_zero_iff, mass_prod, zero_mass, mul_zero]

@[simp] lemma map_fst_prod : (Œº.prod ŒΩ).map Prod.fst = (ŒΩ univ) ‚Ä¢ Œº := by
  apply Subtype.ext
  simp only [val_eq_toMeasure, toMeasure_map, toMeasure_prod, Measure.map_fst_prod]
  ext s s_mble
  simp only [Measure.smul_toOuterMeasure, OuterMeasure.coe_smul, Pi.smul_apply, smul_eq_mul]
  sorry

@[simp] lemma map_snd_prod : (Œº.prod ŒΩ).map Prod.snd = (Œº univ) ‚Ä¢ ŒΩ := by
  sorry

lemma map_prod_map {Œ±' : Type*} [MeasurableSpace Œ±'] {Œ≤' : Type*} [MeasurableSpace Œ≤']
    {f : Œ± ‚Üí Œ±'} {g : Œ≤ ‚Üí Œ≤'}  (f_mble : Measurable f) (g_mble : Measurable g):
    (Œº.map f).prod (ŒΩ.map g) = (Œº.prod ŒΩ).map (Prod.map f g) := by
  apply Subtype.ext
  simp only [val_eq_toMeasure, toMeasure_prod, toMeasure_map]
  rw [Measure.map_prod_map _ _ f_mble g_mble] <;> exact IsFiniteMeasure.toSigmaFinite _

lemma prod_apply_null {s : Set (Œ± √ó Œ≤)} (hs : MeasurableSet s) :
    Œº.prod ŒΩ s = 0 ‚Üî (fun x ‚Ü¶ ŒΩ (Prod.mk x ‚Åª¬π' s)) =·µê[Œº] 0 := by
  convert Measure.measure_prod_null (Œº := Œº.toMeasure) (ŒΩ := ŒΩ.toMeasure) hs
  ¬∑ simp only [toMeasure_prod, toNNReal_eq_zero_iff, or_iff_left_iff_imp]
    intro con
    by_contra
    exact measure_ne_top _ _ con
  ¬∑ constructor <;> intro h <;> filter_upwards [h] with p hp
    ¬∑ simp only [Pi.zero_apply] at *
      rcases (ENNReal.toNNReal_eq_zero_iff _).mp hp with (h'|con)
      ¬∑ exact h'
      ¬∑ by_contra
        exact measure_ne_top _ _ con
    ¬∑ simp only [Pi.zero_apply] at *
      exact (ENNReal.toNNReal_eq_zero_iff _).mpr (Or.inl hp)

lemma measure_ae_null_of_prod_null {s : Set (Œ± √ó Œ≤)} (h : Œº.prod ŒΩ s = 0) :
    (fun x ‚Ü¶ ŒΩ (Prod.mk x ‚Åª¬π' s)) =·µê[Œº] 0 := by
  convert Measure.measure_ae_null_of_prod_null (Œº := Œº.toMeasure) (ŒΩ := ŒΩ.toMeasure) (s := s) ?_
  ¬∑ constructor <;> intro h <;> filter_upwards [h] with p hp
    ¬∑ simp only [Pi.zero_apply] at *
      rcases (ENNReal.toNNReal_eq_zero_iff _).mp hp with (h'|con)
      ¬∑ exact h'
      ¬∑ by_contra
        exact measure_ne_top _ _ con
    ¬∑ simp only [Pi.zero_apply] at *
      exact (ENNReal.toNNReal_eq_zero_iff _).mpr (Or.inl hp)
  ¬∑ simp [toNNReal_eq_zero_iff] at h
    rcases h with (h'|con)
    ¬∑ exact h'
    ¬∑ by_contra
      exact measure_ne_top _ _ con

lemma prod_swap : (Œº.prod ŒΩ).map Prod.swap = ŒΩ.prod Œº := by
  apply Subtype.ext
  simp [Measure.prod_swap]

/-
lemma prod_sum {Œπ : Type*} [Fintype Œπ] (ŒΩs : Œπ ‚Üí FiniteMeasure Œ≤) :
    Œº.prod (‚àë i, ŒΩs i) = ‚àë i, Œº.prod (ŒΩs i) := by
  sorry

lemma sum_prod {Œπ : Type*} [Fintype Œπ] (Œºs : Œπ ‚Üí FiniteMeasure Œ≤) :
    (‚àë i, Œºs i).prod ŒΩ = ‚àë i, (Œºs i).prod ŒΩ := by
  sorry
 -/

variable [TopologicalSpace Œ±] [OpensMeasurableSpace Œ±] [TopologicalSpace Œ≤] [OpensMeasurableSpace Œ≤]

lemma tendsto_prod [SecondCountableTopology Œ±] {Œπ : Type*} {L : Filter Œπ}
    {ŒºŒΩs : Œπ ‚Üí FiniteMeasure Œ± √ó FiniteMeasure Œ≤} {ŒºŒΩ : FiniteMeasure Œ± √ó FiniteMeasure Œ≤}
    (h_lim : L.Tendsto ŒºŒΩs (ùìù ŒºŒΩ)) :
    L.Tendsto (fun i ‚Ü¶ (ŒºŒΩs i).1.prod (ŒºŒΩs i).2) (ùìù (ŒºŒΩ.1.prod ŒºŒΩ.2)) := by
  rw [nhds_prod_eq] at h_lim
  --simp [tendsto_prod_iff] at h_lim
  --rw [Tendsto.prod_mk_nhds] at h_lim
  --rw [tendsto_nhds_prod] at h_lim
  rw [tendsto_iff_forall_integral_tendsto]
  sorry

lemma continuous_prod [SecondCountableTopology Œ±] :
    Continuous (fun (ŒºŒΩ : FiniteMeasure Œ± √ó FiniteMeasure Œ≤) ‚Ü¶ ŒºŒΩ.1.prod ŒºŒΩ.2) := by
  haveI : T1Space (FiniteMeasure (Œ± √ó Œ≤)) := sorry -- Under some reasonable hypotheses?
  --haveI : T1Space (FiniteMeasure Œ± √ó FiniteMeasure Œ≤) := sorry
  apply continuous_iff_continuousAt.mpr
  intro ‚ü®Œº, ŒΩ‚ü©
  let ŒºŒΩ : FiniteMeasure Œ± √ó FiniteMeasure Œ≤ := ‚ü®Œº, ŒΩ‚ü©
  apply continuousAt_of_tendsto_nhds (y := Œº.prod ŒΩ)
  -- Assume also second countability!
  haveI : Nonempty (Œ± √ó Œ≤) := sorry -- ...otherwise trivial
  apply (@tendsto_normalize_iff_tendsto (Œ± √ó Œ≤) _ _ (Œº.prod ŒΩ) _ _ _
          (ùìù ŒºŒΩ) (fun Œ∫ ‚Ü¶ Œ∫.1.prod Œ∫.2) ?_).mp
  ¬∑ refine ‚ü®?_, ?_‚ü©
    ¬∑ -- **This is the main sorry!**
      -- Oh $#!, there is a universe misprint in the statement of `tendsto_of_forall_isOpen_le_liminf`
      have := @tendsto_of_forall_isOpen_le_liminf
      sorry
    ¬∑ sorry  -- The easy case.
  ¬∑ sorry -- ...otherwise trivial
  --apply tendsto_of_forall_isOpen_le_liminf
  --have := tendsto_of_liminf
  --have := @tendsto_iff_forall_integral_tendsto (Œ± √ó Œ≤) _ _ _ ?_ ?_  -- (Œº.prod ŒΩ)
  --sorry

#check continuousAt_of_tendsto_nhds
#check T1Space

lemma continuous_prod' [SecondCountableTopology Œ≤] :
    Continuous (fun (ŒºŒΩ : FiniteMeasure Œ± √ó FiniteMeasure Œ≤) ‚Ü¶ ŒºŒΩ.1.prod ŒºŒΩ.2) := by
  sorry

end FiniteMeasure -- namespace

end FiniteMeasure_product -- section

section ProbabilityMeasure_product
end ProbabilityMeasure_product -- section

end MeasureTheory -- namespace
